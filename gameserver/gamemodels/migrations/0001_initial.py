# Generated by Django 5.2.1 on 2025-05-23 10:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('item_type', models.CharField(choices=[('INGREDIENT', 'Ingredient'), ('POTION', 'Potion'), ('ARTIFACT', 'Artifact'), ('SPELL_SCROLL', 'Spell Scroll'), ('COLLECTIBLE', 'Collectible')], max_length=30)),
                ('image_url', models.URLField(blank=True, max_length=255, null=True)),
                ('rarity', models.PositiveSmallIntegerField(default=1, help_text='1=common, 5=legendary')),
            ],
        ),
        migrations.CreateModel(
            name='MagicalLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('poi_type', models.CharField(choices=[('MAGICAL_LANDMARK', 'Magical Landmark'), ('POTION_INGREDIENT_SPOT', 'Potion Ingredient Spot'), ('CREATURE_HABITAT', 'Creature Habitat'), ('HISTORICAL_SITE', 'Historical Magical Site'), ('PLAYER_SUGGESTED', 'Player Suggested'), ('PORTKEY_LOCATION', 'Portkey Location')], max_length=50)),
                ('real_world_identifier', models.CharField(blank=True, help_text='HERE API ID or similar', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('verification_score', models.IntegerField(default=0, help_text='Score based on player verifications')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discovered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='discovered_locations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MapReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('report_type', models.CharField(choices=[('OBSTRUCTION', 'Muggle Obstruction'), ('NEW_PATH', 'New Magical Passage'), ('POI_INACCURACY', 'Faded Magic (POI Error)'), ('NEW_POI_SUGGESTION', 'New Magical Sighting'), ('PHOTO_EVIDENCE', 'Photo Evidence'), ('ACCESS_ISSUE', 'Accessibility Issue')], max_length=30)),
                ('description_text', models.TextField(blank=True, help_text="Player's description of the issue/finding")),
                ('photo_url', models.URLField(blank=True, help_text='URL to uploaded photo evidence', max_length=255, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('REVIEWING', 'Under Review'), ('VERIFIED', 'Verified & Integrated'), ('REJECTED', 'Rejected'), ('NEEDS_MORE_INFO', 'Needs More Information')], default='SUBMITTED', max_length=20)),
                ('ai_confidence_score', models.FloatField(blank=True, help_text='Confidence from AI analysis', null=True)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('related_poi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='gamemodels.magicallocation')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_reports', to=settings.AUTH_USER_MODEL)),
                ('resolver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('house', models.CharField(blank=True, choices=[('GRYFFINDOR', 'Gryffindor'), ('HUFFLEPUFF', 'Hufflepuff'), ('RAVENCLAW', 'Ravenclaw'), ('SLYTHERIN', 'Slytherin')], max_length=20, null=True)),
                ('level', models.PositiveIntegerField(default=1)),
                ('xp', models.PositiveIntegerField(default=0)),
                ('avatar_url', models.URLField(blank=True, max_length=255, null=True)),
                ('current_latitude', models.FloatField(blank=True, null=True)),
                ('current_longitude', models.FloatField(blank=True, null=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('xp_reward', models.PositiveIntegerField(default=10)),
                ('min_player_level', models.PositiveIntegerField(default=1)),
                ('is_repeatable', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_for_quests', to='gamemodels.gameitem')),
                ('target_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quests_at_location', to='gamemodels.magicallocation')),
            ],
        ),
        migrations.CreateModel(
            name='Wand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('core', models.CharField(choices=[('PHOENIX_FEATHER', 'Phoenix Feather'), ('DRAGON_HEARTSTRING', 'Dragon Heartstring'), ('UNICORN_HAIR', 'Unicorn Hair'), ('VEELA_HAIR', 'Veela Hair'), ('THUNDERBIRD_TAIL', 'Thunderbird Tail Feather')], max_length=30)),
                ('wood_type', models.CharField(choices=[('HOLLY', 'Holly'), ('OAK', 'Oak'), ('YEW', 'Yew'), ('ELDER', 'Elder'), ('HAWTHORN', 'Hawthorn')], max_length=30)),
                ('length_inches', models.DecimalField(decimal_places=1, help_text='Wand length in inches', max_digits=4)),
                ('flexibility', models.CharField(help_text="e.g., 'Supple', 'Rigid', 'Bendy'", max_length=50)),
                ('assigned_to', models.ManyToManyField(blank=True, related_name='wand', to='gamemodels.playerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamemodels.gameitem')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='gamemodels.playerprofile')),
            ],
            options={
                'unique_together': {('player', 'item')},
            },
        ),
        migrations.CreateModel(
            name='PlayerQuestProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quest_progress', to='gamemodels.playerprofile')),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_attempts', to='gamemodels.quest')),
            ],
            options={
                'unique_together': {('player', 'quest')},
            },
        ),
        migrations.CreateModel(
            name='ReportVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agrees_with_report', models.BooleanField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('map_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to='gamemodels.mapreport')),
                ('verifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('map_report', 'verifier')},
            },
        ),
    ]
